// Generated by BUCKLESCRIPT VERSION 4.0.17, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("bs-platform/lib/js/caml_option.js");

var app = {
  textAlign: "center"
};

var container = {
  borderBottom: "1px solid #ddd",
  padding: "10px"
};

var title = {
  fontSize: "18px"
};

function description(param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15, param$16, param$17, param$18, param$19, param$20, param$21, param$22, param$23, param$24, param$25, param$26, param$27, param$28, param$29, param$30, param$31, param$32, param$33, param$34, param$35, param$36, param$37, param$38, param$39, param$40, param$41, param$42, param$43, param$44, param$45, param$46) {
  var partial_arg = "15px";
  var partial_arg$1 = "rgba(0, 0, 0, .5)";
  return (function (param$47, param$48, param$49, param$50, param$51, param$52, param$53, param$54, param$55, param$56, param$57, param$58, param$59, param$60, param$61, param$62, param$63, param$64, param$65, param$66, param$67, param$68, param$69, param$70, param$71, param$72, param$73, param$74, param$75, param$76, param$77, param$78, param$79, param$80, param$81, param$82, param$83, param$84, param$85, param$86, param$87, param$88, param$89, param$90, param$91, param$92, param$93, param$94, param$95, param$96, param$97, param$98, param$99, param$100, param$101, param$102, param$103, param$104, param$105, param$106, param$107, param$108, param$109, param$110, param$111, param$112, param$113, param$114, param$115, param$116, param$117, param$118, param$119, param$120, param$121, param$122, param$123, param$124, param$125, param$126, param$127, param$128, param$129, param$130, param$131, param$132, param$133, param$134, param$135, param$136, param$137, param$138, param$139, param$140, param$141, param$142, param$143, param$144, param$145, param$146, param$147, param$148, param$149, param$150, param$151, param$152, param$153, param$154, param$155, param$156, param$157, param$158, param$159, param$160, param$161, param$162, param$163, param$164, param$165, param$166, param$167, param$168, param$169, param$170, param$171, param$172, param$173, param$174, param$175, param$176, param$177, param$178, param$179, param$180, param$181, param$182, param$183, param$184, param$185, param$186, param$187, param$188, param$189, param$190, param$191, param$192, param$193, param$194, param$195, param$196, param$197, param$198, param$199, param$200, param$201, param$202, param$203, param$204, param$205, param$206, param$207, param$208, param$209, param$210, param$211, param$212, param$213, param$214, param$215, param$216, param$217, param$218, param$219, param$220, param$221, param$222, param$223, param$224, param$225, param$226, param$227, param$228, param$229, param$230, param$231, param$232, param$233, param$234, param$235, param$236, param$237, param$238, param$239, param$240, param$241, param$242, param$243, param$244, param$245, param$246, param$247, param$248, param$249, param$250, param$251, param$252, param$253, param$254, param$255, param$256, param$257, param$258, param$259, param$260, param$261, param$262, param$263, param$264, param$265, param$266, param$267, param$268, param$269, param$270, param$271, param$272, param$273, param$274, param$275, param$276, param$277, param$278, param$279, param$280, param$281, param$282, param$283, param$284, param$285, param$286, param$287, param$288, param$289, param$290, param$291, param$292, param$293, param$294, param$295, param$296, param$297, param$298, param$299, param$300, param$301, param$302, param$303, param$304, param$305, param$306, param$307, param$308, param$309, param$310, param$311, param$312, param$313, param$314, param$315, param$316, param$317, param$318, param$319, param$320, param$321, param$322, param$323, param$324, param$325, param$326, param$327, param$328, param$329, param$330, param$331, param$332, param$333, param$334, param$335, param$336, param$337, param$338, param$339, param$340, param$341, param$342, param$343, param$344, param$345) {
      var prim = param;
      var prim$1 = param$1;
      var prim$2 = param$2;
      var prim$3 = param$3;
      var prim$4 = param$4;
      var prim$5 = param$5;
      var prim$6 = param$6;
      var prim$7 = param$7;
      var prim$8 = param$8;
      var prim$9 = param$9;
      var prim$10 = param$10;
      var prim$11 = param$11;
      var prim$12 = param$12;
      var prim$13 = param$13;
      var prim$14 = param$14;
      var prim$15 = param$15;
      var prim$16 = param$16;
      var prim$17 = param$17;
      var prim$18 = param$18;
      var prim$19 = param$19;
      var prim$20 = param$20;
      var prim$21 = param$21;
      var prim$22 = param$22;
      var prim$23 = param$23;
      var prim$24 = param$24;
      var prim$25 = param$25;
      var prim$26 = param$26;
      var prim$27 = param$27;
      var prim$28 = param$28;
      var prim$29 = param$29;
      var prim$30 = param$30;
      var prim$31 = param$31;
      var prim$32 = param$32;
      var prim$33 = partial_arg$1;
      var prim$34 = param$33;
      var prim$35 = param$34;
      var prim$36 = param$35;
      var prim$37 = param$36;
      var prim$38 = param$37;
      var prim$39 = param$38;
      var prim$40 = param$39;
      var prim$41 = param$40;
      var prim$42 = param$41;
      var prim$43 = param$42;
      var prim$44 = param$43;
      var prim$45 = param$44;
      var prim$46 = param$45;
      var prim$47 = param$46;
      var prim$48 = partial_arg;
      var prim$49 = param$47;
      var prim$50 = param$48;
      var prim$51 = param$49;
      var prim$52 = param$50;
      var prim$53 = param$51;
      var prim$54 = param$52;
      var prim$55 = param$53;
      var prim$56 = param$54;
      var prim$57 = param$55;
      var prim$58 = param$56;
      var prim$59 = param$57;
      var prim$60 = param$58;
      var prim$61 = param$59;
      var prim$62 = param$60;
      var prim$63 = param$61;
      var prim$64 = param$62;
      var prim$65 = param$63;
      var prim$66 = param$64;
      var prim$67 = param$65;
      var prim$68 = param$66;
      var prim$69 = param$67;
      var prim$70 = param$68;
      var prim$71 = param$69;
      var prim$72 = param$70;
      var prim$73 = param$71;
      var prim$74 = param$72;
      var prim$75 = param$73;
      var prim$76 = param$74;
      var prim$77 = param$75;
      var prim$78 = param$76;
      var prim$79 = param$77;
      var prim$80 = param$78;
      var prim$81 = param$79;
      var prim$82 = param$80;
      var prim$83 = param$81;
      var prim$84 = param$82;
      var prim$85 = param$83;
      var prim$86 = param$84;
      var prim$87 = param$85;
      var prim$88 = param$86;
      var prim$89 = param$87;
      var prim$90 = param$88;
      var prim$91 = param$89;
      var prim$92 = param$90;
      var prim$93 = param$91;
      var prim$94 = param$92;
      var prim$95 = param$93;
      var prim$96 = param$94;
      var prim$97 = param$95;
      var prim$98 = param$96;
      var prim$99 = param$97;
      var prim$100 = param$98;
      var prim$101 = param$99;
      var prim$102 = param$100;
      var prim$103 = param$101;
      var prim$104 = param$102;
      var prim$105 = param$103;
      var prim$106 = param$104;
      var prim$107 = param$105;
      var prim$108 = param$106;
      var prim$109 = param$107;
      var prim$110 = param$108;
      var prim$111 = param$109;
      var prim$112 = param$110;
      var prim$113 = param$111;
      var prim$114 = param$112;
      var prim$115 = param$113;
      var prim$116 = param$114;
      var prim$117 = param$115;
      var prim$118 = param$116;
      var prim$119 = param$117;
      var prim$120 = param$118;
      var prim$121 = param$119;
      var prim$122 = param$120;
      var prim$123 = param$121;
      var prim$124 = param$122;
      var prim$125 = param$123;
      var prim$126 = param$124;
      var prim$127 = param$125;
      var prim$128 = param$126;
      var prim$129 = param$127;
      var prim$130 = param$128;
      var prim$131 = param$129;
      var prim$132 = param$130;
      var prim$133 = param$131;
      var prim$134 = param$132;
      var prim$135 = param$133;
      var prim$136 = param$134;
      var prim$137 = param$135;
      var prim$138 = param$136;
      var prim$139 = param$137;
      var prim$140 = param$138;
      var prim$141 = param$139;
      var prim$142 = param$140;
      var prim$143 = param$141;
      var prim$144 = param$142;
      var prim$145 = param$143;
      var prim$146 = param$144;
      var prim$147 = param$145;
      var prim$148 = param$146;
      var prim$149 = param$147;
      var prim$150 = param$148;
      var prim$151 = param$149;
      var prim$152 = param$150;
      var prim$153 = param$151;
      var prim$154 = param$152;
      var prim$155 = param$153;
      var prim$156 = param$154;
      var prim$157 = param$155;
      var prim$158 = param$156;
      var prim$159 = param$157;
      var prim$160 = param$158;
      var prim$161 = param$159;
      var prim$162 = param$160;
      var prim$163 = param$161;
      var prim$164 = param$162;
      var prim$165 = param$163;
      var prim$166 = param$164;
      var prim$167 = param$165;
      var prim$168 = param$166;
      var prim$169 = param$167;
      var prim$170 = param$168;
      var prim$171 = param$169;
      var prim$172 = param$170;
      var prim$173 = param$171;
      var prim$174 = param$172;
      var prim$175 = param$173;
      var prim$176 = param$174;
      var prim$177 = param$175;
      var prim$178 = param$176;
      var prim$179 = param$177;
      var prim$180 = param$178;
      var prim$181 = param$179;
      var prim$182 = param$180;
      var prim$183 = param$181;
      var prim$184 = param$182;
      var prim$185 = param$183;
      var prim$186 = param$184;
      var prim$187 = param$185;
      var prim$188 = param$186;
      var prim$189 = param$187;
      var prim$190 = param$188;
      var prim$191 = param$189;
      var prim$192 = param$190;
      var prim$193 = param$191;
      var prim$194 = param$192;
      var prim$195 = param$193;
      var prim$196 = param$194;
      var prim$197 = param$195;
      var prim$198 = param$196;
      var prim$199 = param$197;
      var prim$200 = param$198;
      var prim$201 = param$199;
      var prim$202 = param$200;
      var prim$203 = param$201;
      var prim$204 = param$202;
      var prim$205 = param$203;
      var prim$206 = param$204;
      var prim$207 = param$205;
      var prim$208 = param$206;
      var prim$209 = param$207;
      var prim$210 = param$208;
      var prim$211 = param$209;
      var prim$212 = param$210;
      var prim$213 = param$211;
      var prim$214 = param$212;
      var prim$215 = param$213;
      var prim$216 = param$214;
      var prim$217 = param$215;
      var prim$218 = param$216;
      var prim$219 = param$217;
      var prim$220 = param$218;
      var prim$221 = param$219;
      var prim$222 = param$220;
      var prim$223 = param$221;
      var prim$224 = param$222;
      var prim$225 = param$223;
      var prim$226 = param$224;
      var prim$227 = param$225;
      var prim$228 = param$226;
      var prim$229 = param$227;
      var prim$230 = param$228;
      var prim$231 = param$229;
      var prim$232 = param$230;
      var prim$233 = param$231;
      var prim$234 = param$232;
      var prim$235 = param$233;
      var prim$236 = param$234;
      var prim$237 = param$235;
      var prim$238 = param$236;
      var prim$239 = param$237;
      var prim$240 = param$238;
      var prim$241 = param$239;
      var prim$242 = param$240;
      var prim$243 = param$241;
      var prim$244 = param$242;
      var prim$245 = param$243;
      var prim$246 = param$244;
      var prim$247 = param$245;
      var prim$248 = param$246;
      var prim$249 = param$247;
      var prim$250 = param$248;
      var prim$251 = param$249;
      var prim$252 = param$250;
      var prim$253 = param$251;
      var prim$254 = param$252;
      var prim$255 = param$253;
      var prim$256 = param$254;
      var prim$257 = param$255;
      var prim$258 = param$256;
      var prim$259 = param$257;
      var prim$260 = param$258;
      var prim$261 = param$259;
      var prim$262 = param$260;
      var prim$263 = param$261;
      var prim$264 = param$262;
      var prim$265 = param$263;
      var prim$266 = param$264;
      var prim$267 = param$265;
      var prim$268 = param$266;
      var prim$269 = param$267;
      var prim$270 = param$268;
      var prim$271 = param$269;
      var prim$272 = param$270;
      var prim$273 = param$271;
      var prim$274 = param$272;
      var prim$275 = param$273;
      var prim$276 = param$274;
      var prim$277 = param$275;
      var prim$278 = param$276;
      var prim$279 = param$277;
      var prim$280 = param$278;
      var prim$281 = param$279;
      var prim$282 = param$280;
      var prim$283 = param$281;
      var prim$284 = param$282;
      var prim$285 = param$283;
      var prim$286 = param$284;
      var prim$287 = param$285;
      var prim$288 = param$286;
      var prim$289 = param$287;
      var prim$290 = param$288;
      var prim$291 = param$289;
      var prim$292 = param$290;
      var prim$293 = param$291;
      var prim$294 = param$292;
      var prim$295 = param$293;
      var prim$296 = param$294;
      var prim$297 = param$295;
      var prim$298 = param$296;
      var prim$299 = param$297;
      var prim$300 = param$298;
      var prim$301 = param$299;
      var prim$302 = param$300;
      var prim$303 = param$301;
      var prim$304 = param$302;
      var prim$305 = param$303;
      var prim$306 = param$304;
      var prim$307 = param$305;
      var prim$308 = param$306;
      var prim$309 = param$307;
      var prim$310 = param$308;
      var prim$311 = param$309;
      var prim$312 = param$310;
      var prim$313 = param$311;
      var prim$314 = param$312;
      var prim$315 = param$313;
      var prim$316 = param$314;
      var prim$317 = param$315;
      var prim$318 = param$316;
      var prim$319 = param$317;
      var prim$320 = param$318;
      var prim$321 = param$319;
      var prim$322 = param$320;
      var prim$323 = param$321;
      var prim$324 = param$322;
      var prim$325 = param$323;
      var prim$326 = param$324;
      var prim$327 = param$325;
      var prim$328 = param$326;
      var prim$329 = param$327;
      var prim$330 = param$328;
      var prim$331 = param$329;
      var prim$332 = param$330;
      var prim$333 = param$331;
      var prim$334 = param$332;
      var prim$335 = param$333;
      var prim$336 = param$334;
      var prim$337 = param$335;
      var prim$338 = param$336;
      var prim$339 = param$337;
      var prim$340 = param$338;
      var prim$341 = param$339;
      var prim$342 = param$340;
      var prim$343 = param$341;
      var prim$344 = param$342;
      var prim$345 = param$343;
      var prim$346 = param$344;
      var tmp = { };
      if (prim !== undefined) {
        tmp.azimuth = Caml_option.valFromOption(prim);
      }
      if (prim$1 !== undefined) {
        tmp.background = Caml_option.valFromOption(prim$1);
      }
      if (prim$2 !== undefined) {
        tmp.backgroundAttachment = Caml_option.valFromOption(prim$2);
      }
      if (prim$3 !== undefined) {
        tmp.backgroundColor = Caml_option.valFromOption(prim$3);
      }
      if (prim$4 !== undefined) {
        tmp.backgroundImage = Caml_option.valFromOption(prim$4);
      }
      if (prim$5 !== undefined) {
        tmp.backgroundPosition = Caml_option.valFromOption(prim$5);
      }
      if (prim$6 !== undefined) {
        tmp.backgroundRepeat = Caml_option.valFromOption(prim$6);
      }
      if (prim$7 !== undefined) {
        tmp.border = Caml_option.valFromOption(prim$7);
      }
      if (prim$8 !== undefined) {
        tmp.borderCollapse = Caml_option.valFromOption(prim$8);
      }
      if (prim$9 !== undefined) {
        tmp.borderColor = Caml_option.valFromOption(prim$9);
      }
      if (prim$10 !== undefined) {
        tmp.borderSpacing = Caml_option.valFromOption(prim$10);
      }
      if (prim$11 !== undefined) {
        tmp.borderStyle = Caml_option.valFromOption(prim$11);
      }
      if (prim$12 !== undefined) {
        tmp.borderTop = Caml_option.valFromOption(prim$12);
      }
      if (prim$13 !== undefined) {
        tmp.borderRight = Caml_option.valFromOption(prim$13);
      }
      if (prim$14 !== undefined) {
        tmp.borderBottom = Caml_option.valFromOption(prim$14);
      }
      if (prim$15 !== undefined) {
        tmp.borderLeft = Caml_option.valFromOption(prim$15);
      }
      if (prim$16 !== undefined) {
        tmp.borderTopColor = Caml_option.valFromOption(prim$16);
      }
      if (prim$17 !== undefined) {
        tmp.borderRightColor = Caml_option.valFromOption(prim$17);
      }
      if (prim$18 !== undefined) {
        tmp.borderBottomColor = Caml_option.valFromOption(prim$18);
      }
      if (prim$19 !== undefined) {
        tmp.borderLeftColor = Caml_option.valFromOption(prim$19);
      }
      if (prim$20 !== undefined) {
        tmp.borderTopStyle = Caml_option.valFromOption(prim$20);
      }
      if (prim$21 !== undefined) {
        tmp.borderRightStyle = Caml_option.valFromOption(prim$21);
      }
      if (prim$22 !== undefined) {
        tmp.borderBottomStyle = Caml_option.valFromOption(prim$22);
      }
      if (prim$23 !== undefined) {
        tmp.borderLeftStyle = Caml_option.valFromOption(prim$23);
      }
      if (prim$24 !== undefined) {
        tmp.borderTopWidth = Caml_option.valFromOption(prim$24);
      }
      if (prim$25 !== undefined) {
        tmp.borderRightWidth = Caml_option.valFromOption(prim$25);
      }
      if (prim$26 !== undefined) {
        tmp.borderBottomWidth = Caml_option.valFromOption(prim$26);
      }
      if (prim$27 !== undefined) {
        tmp.borderLeftWidth = Caml_option.valFromOption(prim$27);
      }
      if (prim$28 !== undefined) {
        tmp.borderWidth = Caml_option.valFromOption(prim$28);
      }
      if (prim$29 !== undefined) {
        tmp.bottom = Caml_option.valFromOption(prim$29);
      }
      if (prim$30 !== undefined) {
        tmp.captionSide = Caml_option.valFromOption(prim$30);
      }
      if (prim$31 !== undefined) {
        tmp.clear = Caml_option.valFromOption(prim$31);
      }
      if (prim$32 !== undefined) {
        tmp.clip = Caml_option.valFromOption(prim$32);
      }
      if (prim$33 !== undefined) {
        tmp.color = Caml_option.valFromOption(prim$33);
      }
      if (prim$34 !== undefined) {
        tmp.content = Caml_option.valFromOption(prim$34);
      }
      if (prim$35 !== undefined) {
        tmp.counterIncrement = Caml_option.valFromOption(prim$35);
      }
      if (prim$36 !== undefined) {
        tmp.counterReset = Caml_option.valFromOption(prim$36);
      }
      if (prim$37 !== undefined) {
        tmp.cue = Caml_option.valFromOption(prim$37);
      }
      if (prim$38 !== undefined) {
        tmp.cueAfter = Caml_option.valFromOption(prim$38);
      }
      if (prim$39 !== undefined) {
        tmp.cueBefore = Caml_option.valFromOption(prim$39);
      }
      if (prim$40 !== undefined) {
        tmp.cursor = Caml_option.valFromOption(prim$40);
      }
      if (prim$41 !== undefined) {
        tmp.direction = Caml_option.valFromOption(prim$41);
      }
      if (prim$42 !== undefined) {
        tmp.display = Caml_option.valFromOption(prim$42);
      }
      if (prim$43 !== undefined) {
        tmp.elevation = Caml_option.valFromOption(prim$43);
      }
      if (prim$44 !== undefined) {
        tmp.emptyCells = Caml_option.valFromOption(prim$44);
      }
      if (prim$45 !== undefined) {
        tmp.float = Caml_option.valFromOption(prim$45);
      }
      if (prim$46 !== undefined) {
        tmp.font = Caml_option.valFromOption(prim$46);
      }
      if (prim$47 !== undefined) {
        tmp.fontFamily = Caml_option.valFromOption(prim$47);
      }
      if (prim$48 !== undefined) {
        tmp.fontSize = Caml_option.valFromOption(prim$48);
      }
      if (prim$49 !== undefined) {
        tmp.fontSizeAdjust = Caml_option.valFromOption(prim$49);
      }
      if (prim$50 !== undefined) {
        tmp.fontStretch = Caml_option.valFromOption(prim$50);
      }
      if (prim$51 !== undefined) {
        tmp.fontStyle = Caml_option.valFromOption(prim$51);
      }
      if (prim$52 !== undefined) {
        tmp.fontVariant = Caml_option.valFromOption(prim$52);
      }
      if (prim$53 !== undefined) {
        tmp.fontWeight = Caml_option.valFromOption(prim$53);
      }
      if (prim$54 !== undefined) {
        tmp.height = Caml_option.valFromOption(prim$54);
      }
      if (prim$55 !== undefined) {
        tmp.left = Caml_option.valFromOption(prim$55);
      }
      if (prim$56 !== undefined) {
        tmp.letterSpacing = Caml_option.valFromOption(prim$56);
      }
      if (prim$57 !== undefined) {
        tmp.lineHeight = Caml_option.valFromOption(prim$57);
      }
      if (prim$58 !== undefined) {
        tmp.listStyle = Caml_option.valFromOption(prim$58);
      }
      if (prim$59 !== undefined) {
        tmp.listStyleImage = Caml_option.valFromOption(prim$59);
      }
      if (prim$60 !== undefined) {
        tmp.listStylePosition = Caml_option.valFromOption(prim$60);
      }
      if (prim$61 !== undefined) {
        tmp.listStyleType = Caml_option.valFromOption(prim$61);
      }
      if (prim$62 !== undefined) {
        tmp.margin = Caml_option.valFromOption(prim$62);
      }
      if (prim$63 !== undefined) {
        tmp.marginTop = Caml_option.valFromOption(prim$63);
      }
      if (prim$64 !== undefined) {
        tmp.marginRight = Caml_option.valFromOption(prim$64);
      }
      if (prim$65 !== undefined) {
        tmp.marginBottom = Caml_option.valFromOption(prim$65);
      }
      if (prim$66 !== undefined) {
        tmp.marginLeft = Caml_option.valFromOption(prim$66);
      }
      if (prim$67 !== undefined) {
        tmp.markerOffset = Caml_option.valFromOption(prim$67);
      }
      if (prim$68 !== undefined) {
        tmp.marks = Caml_option.valFromOption(prim$68);
      }
      if (prim$69 !== undefined) {
        tmp.maxHeight = Caml_option.valFromOption(prim$69);
      }
      if (prim$70 !== undefined) {
        tmp.maxWidth = Caml_option.valFromOption(prim$70);
      }
      if (prim$71 !== undefined) {
        tmp.minHeight = Caml_option.valFromOption(prim$71);
      }
      if (prim$72 !== undefined) {
        tmp.minWidth = Caml_option.valFromOption(prim$72);
      }
      if (prim$73 !== undefined) {
        tmp.orphans = Caml_option.valFromOption(prim$73);
      }
      if (prim$74 !== undefined) {
        tmp.outline = Caml_option.valFromOption(prim$74);
      }
      if (prim$75 !== undefined) {
        tmp.outlineColor = Caml_option.valFromOption(prim$75);
      }
      if (prim$76 !== undefined) {
        tmp.outlineStyle = Caml_option.valFromOption(prim$76);
      }
      if (prim$77 !== undefined) {
        tmp.outlineWidth = Caml_option.valFromOption(prim$77);
      }
      if (prim$78 !== undefined) {
        tmp.overflow = Caml_option.valFromOption(prim$78);
      }
      if (prim$79 !== undefined) {
        tmp.overflowX = Caml_option.valFromOption(prim$79);
      }
      if (prim$80 !== undefined) {
        tmp.overflowY = Caml_option.valFromOption(prim$80);
      }
      if (prim$81 !== undefined) {
        tmp.padding = Caml_option.valFromOption(prim$81);
      }
      if (prim$82 !== undefined) {
        tmp.paddingTop = Caml_option.valFromOption(prim$82);
      }
      if (prim$83 !== undefined) {
        tmp.paddingRight = Caml_option.valFromOption(prim$83);
      }
      if (prim$84 !== undefined) {
        tmp.paddingBottom = Caml_option.valFromOption(prim$84);
      }
      if (prim$85 !== undefined) {
        tmp.paddingLeft = Caml_option.valFromOption(prim$85);
      }
      if (prim$86 !== undefined) {
        tmp.page = Caml_option.valFromOption(prim$86);
      }
      if (prim$87 !== undefined) {
        tmp.pageBreakAfter = Caml_option.valFromOption(prim$87);
      }
      if (prim$88 !== undefined) {
        tmp.pageBreakBefore = Caml_option.valFromOption(prim$88);
      }
      if (prim$89 !== undefined) {
        tmp.pageBreakInside = Caml_option.valFromOption(prim$89);
      }
      if (prim$90 !== undefined) {
        tmp.pause = Caml_option.valFromOption(prim$90);
      }
      if (prim$91 !== undefined) {
        tmp.pauseAfter = Caml_option.valFromOption(prim$91);
      }
      if (prim$92 !== undefined) {
        tmp.pauseBefore = Caml_option.valFromOption(prim$92);
      }
      if (prim$93 !== undefined) {
        tmp.pitch = Caml_option.valFromOption(prim$93);
      }
      if (prim$94 !== undefined) {
        tmp.pitchRange = Caml_option.valFromOption(prim$94);
      }
      if (prim$95 !== undefined) {
        tmp.playDuring = Caml_option.valFromOption(prim$95);
      }
      if (prim$96 !== undefined) {
        tmp.position = Caml_option.valFromOption(prim$96);
      }
      if (prim$97 !== undefined) {
        tmp.quotes = Caml_option.valFromOption(prim$97);
      }
      if (prim$98 !== undefined) {
        tmp.richness = Caml_option.valFromOption(prim$98);
      }
      if (prim$99 !== undefined) {
        tmp.right = Caml_option.valFromOption(prim$99);
      }
      if (prim$100 !== undefined) {
        tmp.size = Caml_option.valFromOption(prim$100);
      }
      if (prim$101 !== undefined) {
        tmp.speak = Caml_option.valFromOption(prim$101);
      }
      if (prim$102 !== undefined) {
        tmp.speakHeader = Caml_option.valFromOption(prim$102);
      }
      if (prim$103 !== undefined) {
        tmp.speakNumeral = Caml_option.valFromOption(prim$103);
      }
      if (prim$104 !== undefined) {
        tmp.speakPunctuation = Caml_option.valFromOption(prim$104);
      }
      if (prim$105 !== undefined) {
        tmp.speechRate = Caml_option.valFromOption(prim$105);
      }
      if (prim$106 !== undefined) {
        tmp.stress = Caml_option.valFromOption(prim$106);
      }
      if (prim$107 !== undefined) {
        tmp.tableLayout = Caml_option.valFromOption(prim$107);
      }
      if (prim$108 !== undefined) {
        tmp.textAlign = Caml_option.valFromOption(prim$108);
      }
      if (prim$109 !== undefined) {
        tmp.textDecoration = Caml_option.valFromOption(prim$109);
      }
      if (prim$110 !== undefined) {
        tmp.textIndent = Caml_option.valFromOption(prim$110);
      }
      if (prim$111 !== undefined) {
        tmp.textShadow = Caml_option.valFromOption(prim$111);
      }
      if (prim$112 !== undefined) {
        tmp.textTransform = Caml_option.valFromOption(prim$112);
      }
      if (prim$113 !== undefined) {
        tmp.top = Caml_option.valFromOption(prim$113);
      }
      if (prim$114 !== undefined) {
        tmp.unicodeBidi = Caml_option.valFromOption(prim$114);
      }
      if (prim$115 !== undefined) {
        tmp.verticalAlign = Caml_option.valFromOption(prim$115);
      }
      if (prim$116 !== undefined) {
        tmp.visibility = Caml_option.valFromOption(prim$116);
      }
      if (prim$117 !== undefined) {
        tmp.voiceFamily = Caml_option.valFromOption(prim$117);
      }
      if (prim$118 !== undefined) {
        tmp.volume = Caml_option.valFromOption(prim$118);
      }
      if (prim$119 !== undefined) {
        tmp.whiteSpace = Caml_option.valFromOption(prim$119);
      }
      if (prim$120 !== undefined) {
        tmp.widows = Caml_option.valFromOption(prim$120);
      }
      if (prim$121 !== undefined) {
        tmp.width = Caml_option.valFromOption(prim$121);
      }
      if (prim$122 !== undefined) {
        tmp.wordSpacing = Caml_option.valFromOption(prim$122);
      }
      if (prim$123 !== undefined) {
        tmp.zIndex = Caml_option.valFromOption(prim$123);
      }
      if (prim$124 !== undefined) {
        tmp.opacity = Caml_option.valFromOption(prim$124);
      }
      if (prim$125 !== undefined) {
        tmp.backgroundOrigin = Caml_option.valFromOption(prim$125);
      }
      if (prim$126 !== undefined) {
        tmp.backgroundSize = Caml_option.valFromOption(prim$126);
      }
      if (prim$127 !== undefined) {
        tmp.backgroundClip = Caml_option.valFromOption(prim$127);
      }
      if (prim$128 !== undefined) {
        tmp.borderRadius = Caml_option.valFromOption(prim$128);
      }
      if (prim$129 !== undefined) {
        tmp.borderTopLeftRadius = Caml_option.valFromOption(prim$129);
      }
      if (prim$130 !== undefined) {
        tmp.borderTopRightRadius = Caml_option.valFromOption(prim$130);
      }
      if (prim$131 !== undefined) {
        tmp.borderBottomLeftRadius = Caml_option.valFromOption(prim$131);
      }
      if (prim$132 !== undefined) {
        tmp.borderBottomRightRadius = Caml_option.valFromOption(prim$132);
      }
      if (prim$133 !== undefined) {
        tmp.borderImage = Caml_option.valFromOption(prim$133);
      }
      if (prim$134 !== undefined) {
        tmp.borderImageSource = Caml_option.valFromOption(prim$134);
      }
      if (prim$135 !== undefined) {
        tmp.borderImageSlice = Caml_option.valFromOption(prim$135);
      }
      if (prim$136 !== undefined) {
        tmp.borderImageWidth = Caml_option.valFromOption(prim$136);
      }
      if (prim$137 !== undefined) {
        tmp.borderImageOutset = Caml_option.valFromOption(prim$137);
      }
      if (prim$138 !== undefined) {
        tmp.borderImageRepeat = Caml_option.valFromOption(prim$138);
      }
      if (prim$139 !== undefined) {
        tmp.boxShadow = Caml_option.valFromOption(prim$139);
      }
      if (prim$140 !== undefined) {
        tmp.columns = Caml_option.valFromOption(prim$140);
      }
      if (prim$141 !== undefined) {
        tmp.columnCount = Caml_option.valFromOption(prim$141);
      }
      if (prim$142 !== undefined) {
        tmp.columnFill = Caml_option.valFromOption(prim$142);
      }
      if (prim$143 !== undefined) {
        tmp.columnGap = Caml_option.valFromOption(prim$143);
      }
      if (prim$144 !== undefined) {
        tmp.columnRule = Caml_option.valFromOption(prim$144);
      }
      if (prim$145 !== undefined) {
        tmp.columnRuleColor = Caml_option.valFromOption(prim$145);
      }
      if (prim$146 !== undefined) {
        tmp.columnRuleStyle = Caml_option.valFromOption(prim$146);
      }
      if (prim$147 !== undefined) {
        tmp.columnRuleWidth = Caml_option.valFromOption(prim$147);
      }
      if (prim$148 !== undefined) {
        tmp.columnSpan = Caml_option.valFromOption(prim$148);
      }
      if (prim$149 !== undefined) {
        tmp.columnWidth = Caml_option.valFromOption(prim$149);
      }
      if (prim$150 !== undefined) {
        tmp.breakAfter = Caml_option.valFromOption(prim$150);
      }
      if (prim$151 !== undefined) {
        tmp.breakBefore = Caml_option.valFromOption(prim$151);
      }
      if (prim$152 !== undefined) {
        tmp.breakInside = Caml_option.valFromOption(prim$152);
      }
      if (prim$153 !== undefined) {
        tmp.rest = Caml_option.valFromOption(prim$153);
      }
      if (prim$154 !== undefined) {
        tmp.restAfter = Caml_option.valFromOption(prim$154);
      }
      if (prim$155 !== undefined) {
        tmp.restBefore = Caml_option.valFromOption(prim$155);
      }
      if (prim$156 !== undefined) {
        tmp.speakAs = Caml_option.valFromOption(prim$156);
      }
      if (prim$157 !== undefined) {
        tmp.voiceBalance = Caml_option.valFromOption(prim$157);
      }
      if (prim$158 !== undefined) {
        tmp.voiceDuration = Caml_option.valFromOption(prim$158);
      }
      if (prim$159 !== undefined) {
        tmp.voicePitch = Caml_option.valFromOption(prim$159);
      }
      if (prim$160 !== undefined) {
        tmp.voiceRange = Caml_option.valFromOption(prim$160);
      }
      if (prim$161 !== undefined) {
        tmp.voiceRate = Caml_option.valFromOption(prim$161);
      }
      if (prim$162 !== undefined) {
        tmp.voiceStress = Caml_option.valFromOption(prim$162);
      }
      if (prim$163 !== undefined) {
        tmp.voiceVolume = Caml_option.valFromOption(prim$163);
      }
      if (prim$164 !== undefined) {
        tmp.objectFit = Caml_option.valFromOption(prim$164);
      }
      if (prim$165 !== undefined) {
        tmp.objectPosition = Caml_option.valFromOption(prim$165);
      }
      if (prim$166 !== undefined) {
        tmp.imageResolution = Caml_option.valFromOption(prim$166);
      }
      if (prim$167 !== undefined) {
        tmp.imageOrientation = Caml_option.valFromOption(prim$167);
      }
      if (prim$168 !== undefined) {
        tmp.alignContent = Caml_option.valFromOption(prim$168);
      }
      if (prim$169 !== undefined) {
        tmp.alignItems = Caml_option.valFromOption(prim$169);
      }
      if (prim$170 !== undefined) {
        tmp.alignSelf = Caml_option.valFromOption(prim$170);
      }
      if (prim$171 !== undefined) {
        tmp.flex = Caml_option.valFromOption(prim$171);
      }
      if (prim$172 !== undefined) {
        tmp.flexBasis = Caml_option.valFromOption(prim$172);
      }
      if (prim$173 !== undefined) {
        tmp.flexDirection = Caml_option.valFromOption(prim$173);
      }
      if (prim$174 !== undefined) {
        tmp.flexFlow = Caml_option.valFromOption(prim$174);
      }
      if (prim$175 !== undefined) {
        tmp.flexGrow = Caml_option.valFromOption(prim$175);
      }
      if (prim$176 !== undefined) {
        tmp.flexShrink = Caml_option.valFromOption(prim$176);
      }
      if (prim$177 !== undefined) {
        tmp.flexWrap = Caml_option.valFromOption(prim$177);
      }
      if (prim$178 !== undefined) {
        tmp.justifyContent = Caml_option.valFromOption(prim$178);
      }
      if (prim$179 !== undefined) {
        tmp.order = Caml_option.valFromOption(prim$179);
      }
      if (prim$180 !== undefined) {
        tmp.textDecorationColor = Caml_option.valFromOption(prim$180);
      }
      if (prim$181 !== undefined) {
        tmp.textDecorationLine = Caml_option.valFromOption(prim$181);
      }
      if (prim$182 !== undefined) {
        tmp.textDecorationSkip = Caml_option.valFromOption(prim$182);
      }
      if (prim$183 !== undefined) {
        tmp.textDecorationStyle = Caml_option.valFromOption(prim$183);
      }
      if (prim$184 !== undefined) {
        tmp.textEmphasis = Caml_option.valFromOption(prim$184);
      }
      if (prim$185 !== undefined) {
        tmp.textEmphasisColor = Caml_option.valFromOption(prim$185);
      }
      if (prim$186 !== undefined) {
        tmp.textEmphasisPosition = Caml_option.valFromOption(prim$186);
      }
      if (prim$187 !== undefined) {
        tmp.textEmphasisStyle = Caml_option.valFromOption(prim$187);
      }
      if (prim$188 !== undefined) {
        tmp.textUnderlinePosition = Caml_option.valFromOption(prim$188);
      }
      if (prim$189 !== undefined) {
        tmp.fontFeatureSettings = Caml_option.valFromOption(prim$189);
      }
      if (prim$190 !== undefined) {
        tmp.fontKerning = Caml_option.valFromOption(prim$190);
      }
      if (prim$191 !== undefined) {
        tmp.fontLanguageOverride = Caml_option.valFromOption(prim$191);
      }
      if (prim$192 !== undefined) {
        tmp.fontSynthesis = Caml_option.valFromOption(prim$192);
      }
      if (prim$193 !== undefined) {
        tmp.forntVariantAlternates = Caml_option.valFromOption(prim$193);
      }
      if (prim$194 !== undefined) {
        tmp.fontVariantCaps = Caml_option.valFromOption(prim$194);
      }
      if (prim$195 !== undefined) {
        tmp.fontVariantEastAsian = Caml_option.valFromOption(prim$195);
      }
      if (prim$196 !== undefined) {
        tmp.fontVariantLigatures = Caml_option.valFromOption(prim$196);
      }
      if (prim$197 !== undefined) {
        tmp.fontVariantNumeric = Caml_option.valFromOption(prim$197);
      }
      if (prim$198 !== undefined) {
        tmp.fontVariantPosition = Caml_option.valFromOption(prim$198);
      }
      if (prim$199 !== undefined) {
        tmp.all = Caml_option.valFromOption(prim$199);
      }
      if (prim$200 !== undefined) {
        tmp.glyphOrientationVertical = Caml_option.valFromOption(prim$200);
      }
      if (prim$201 !== undefined) {
        tmp.textCombineUpright = Caml_option.valFromOption(prim$201);
      }
      if (prim$202 !== undefined) {
        tmp.textOrientation = Caml_option.valFromOption(prim$202);
      }
      if (prim$203 !== undefined) {
        tmp.writingMode = Caml_option.valFromOption(prim$203);
      }
      if (prim$204 !== undefined) {
        tmp.shapeImageThreshold = Caml_option.valFromOption(prim$204);
      }
      if (prim$205 !== undefined) {
        tmp.shapeMargin = Caml_option.valFromOption(prim$205);
      }
      if (prim$206 !== undefined) {
        tmp.shapeOutside = Caml_option.valFromOption(prim$206);
      }
      if (prim$207 !== undefined) {
        tmp.clipPath = Caml_option.valFromOption(prim$207);
      }
      if (prim$208 !== undefined) {
        tmp.clipRule = Caml_option.valFromOption(prim$208);
      }
      if (prim$209 !== undefined) {
        tmp.mask = Caml_option.valFromOption(prim$209);
      }
      if (prim$210 !== undefined) {
        tmp.maskBorder = Caml_option.valFromOption(prim$210);
      }
      if (prim$211 !== undefined) {
        tmp.maskBorderMode = Caml_option.valFromOption(prim$211);
      }
      if (prim$212 !== undefined) {
        tmp.maskBorderOutset = Caml_option.valFromOption(prim$212);
      }
      if (prim$213 !== undefined) {
        tmp.maskBorderRepeat = Caml_option.valFromOption(prim$213);
      }
      if (prim$214 !== undefined) {
        tmp.maskBorderSlice = Caml_option.valFromOption(prim$214);
      }
      if (prim$215 !== undefined) {
        tmp.maskBorderSource = Caml_option.valFromOption(prim$215);
      }
      if (prim$216 !== undefined) {
        tmp.maskBorderWidth = Caml_option.valFromOption(prim$216);
      }
      if (prim$217 !== undefined) {
        tmp.maskClip = Caml_option.valFromOption(prim$217);
      }
      if (prim$218 !== undefined) {
        tmp.maskComposite = Caml_option.valFromOption(prim$218);
      }
      if (prim$219 !== undefined) {
        tmp.maskImage = Caml_option.valFromOption(prim$219);
      }
      if (prim$220 !== undefined) {
        tmp.maskMode = Caml_option.valFromOption(prim$220);
      }
      if (prim$221 !== undefined) {
        tmp.maskOrigin = Caml_option.valFromOption(prim$221);
      }
      if (prim$222 !== undefined) {
        tmp.maskPosition = Caml_option.valFromOption(prim$222);
      }
      if (prim$223 !== undefined) {
        tmp.maskRepeat = Caml_option.valFromOption(prim$223);
      }
      if (prim$224 !== undefined) {
        tmp.maskSize = Caml_option.valFromOption(prim$224);
      }
      if (prim$225 !== undefined) {
        tmp.maskType = Caml_option.valFromOption(prim$225);
      }
      if (prim$226 !== undefined) {
        tmp.backgroundBlendMode = Caml_option.valFromOption(prim$226);
      }
      if (prim$227 !== undefined) {
        tmp.isolation = Caml_option.valFromOption(prim$227);
      }
      if (prim$228 !== undefined) {
        tmp.mixBlendMode = Caml_option.valFromOption(prim$228);
      }
      if (prim$229 !== undefined) {
        tmp.boxDecorationBreak = Caml_option.valFromOption(prim$229);
      }
      if (prim$230 !== undefined) {
        tmp.boxSizing = Caml_option.valFromOption(prim$230);
      }
      if (prim$231 !== undefined) {
        tmp.caretColor = Caml_option.valFromOption(prim$231);
      }
      if (prim$232 !== undefined) {
        tmp.navDown = Caml_option.valFromOption(prim$232);
      }
      if (prim$233 !== undefined) {
        tmp.navLeft = Caml_option.valFromOption(prim$233);
      }
      if (prim$234 !== undefined) {
        tmp.navRight = Caml_option.valFromOption(prim$234);
      }
      if (prim$235 !== undefined) {
        tmp.navUp = Caml_option.valFromOption(prim$235);
      }
      if (prim$236 !== undefined) {
        tmp.outlineOffset = Caml_option.valFromOption(prim$236);
      }
      if (prim$237 !== undefined) {
        tmp.resize = Caml_option.valFromOption(prim$237);
      }
      if (prim$238 !== undefined) {
        tmp.textOverflow = Caml_option.valFromOption(prim$238);
      }
      if (prim$239 !== undefined) {
        tmp.grid = Caml_option.valFromOption(prim$239);
      }
      if (prim$240 !== undefined) {
        tmp.gridArea = Caml_option.valFromOption(prim$240);
      }
      if (prim$241 !== undefined) {
        tmp.gridAutoColumns = Caml_option.valFromOption(prim$241);
      }
      if (prim$242 !== undefined) {
        tmp.gridAutoFlow = Caml_option.valFromOption(prim$242);
      }
      if (prim$243 !== undefined) {
        tmp.gridAutoRows = Caml_option.valFromOption(prim$243);
      }
      if (prim$244 !== undefined) {
        tmp.gridColumn = Caml_option.valFromOption(prim$244);
      }
      if (prim$245 !== undefined) {
        tmp.gridColumnEnd = Caml_option.valFromOption(prim$245);
      }
      if (prim$246 !== undefined) {
        tmp.gridColumnGap = Caml_option.valFromOption(prim$246);
      }
      if (prim$247 !== undefined) {
        tmp.gridColumnStart = Caml_option.valFromOption(prim$247);
      }
      if (prim$248 !== undefined) {
        tmp.gridGap = Caml_option.valFromOption(prim$248);
      }
      if (prim$249 !== undefined) {
        tmp.gridRow = Caml_option.valFromOption(prim$249);
      }
      if (prim$250 !== undefined) {
        tmp.gridRowEnd = Caml_option.valFromOption(prim$250);
      }
      if (prim$251 !== undefined) {
        tmp.gridRowGap = Caml_option.valFromOption(prim$251);
      }
      if (prim$252 !== undefined) {
        tmp.gridRowStart = Caml_option.valFromOption(prim$252);
      }
      if (prim$253 !== undefined) {
        tmp.gridTemplate = Caml_option.valFromOption(prim$253);
      }
      if (prim$254 !== undefined) {
        tmp.gridTemplateAreas = Caml_option.valFromOption(prim$254);
      }
      if (prim$255 !== undefined) {
        tmp.gridTemplateColumns = Caml_option.valFromOption(prim$255);
      }
      if (prim$256 !== undefined) {
        tmp.gridTemplateRows = Caml_option.valFromOption(prim$256);
      }
      if (prim$257 !== undefined) {
        tmp.willChange = Caml_option.valFromOption(prim$257);
      }
      if (prim$258 !== undefined) {
        tmp.hangingPunctuation = Caml_option.valFromOption(prim$258);
      }
      if (prim$259 !== undefined) {
        tmp.hyphens = Caml_option.valFromOption(prim$259);
      }
      if (prim$260 !== undefined) {
        tmp.lineBreak = Caml_option.valFromOption(prim$260);
      }
      if (prim$261 !== undefined) {
        tmp.overflowWrap = Caml_option.valFromOption(prim$261);
      }
      if (prim$262 !== undefined) {
        tmp.tabSize = Caml_option.valFromOption(prim$262);
      }
      if (prim$263 !== undefined) {
        tmp.textAlignLast = Caml_option.valFromOption(prim$263);
      }
      if (prim$264 !== undefined) {
        tmp.textJustify = Caml_option.valFromOption(prim$264);
      }
      if (prim$265 !== undefined) {
        tmp.wordBreak = Caml_option.valFromOption(prim$265);
      }
      if (prim$266 !== undefined) {
        tmp.wordWrap = Caml_option.valFromOption(prim$266);
      }
      if (prim$267 !== undefined) {
        tmp.animation = Caml_option.valFromOption(prim$267);
      }
      if (prim$268 !== undefined) {
        tmp.animationDelay = Caml_option.valFromOption(prim$268);
      }
      if (prim$269 !== undefined) {
        tmp.animationDirection = Caml_option.valFromOption(prim$269);
      }
      if (prim$270 !== undefined) {
        tmp.animationDuration = Caml_option.valFromOption(prim$270);
      }
      if (prim$271 !== undefined) {
        tmp.animationFillMode = Caml_option.valFromOption(prim$271);
      }
      if (prim$272 !== undefined) {
        tmp.animationIterationCount = Caml_option.valFromOption(prim$272);
      }
      if (prim$273 !== undefined) {
        tmp.animationName = Caml_option.valFromOption(prim$273);
      }
      if (prim$274 !== undefined) {
        tmp.animationPlayState = Caml_option.valFromOption(prim$274);
      }
      if (prim$275 !== undefined) {
        tmp.animationTimingFunction = Caml_option.valFromOption(prim$275);
      }
      if (prim$276 !== undefined) {
        tmp.transition = Caml_option.valFromOption(prim$276);
      }
      if (prim$277 !== undefined) {
        tmp.transitionDelay = Caml_option.valFromOption(prim$277);
      }
      if (prim$278 !== undefined) {
        tmp.transitionDuration = Caml_option.valFromOption(prim$278);
      }
      if (prim$279 !== undefined) {
        tmp.transitionProperty = Caml_option.valFromOption(prim$279);
      }
      if (prim$280 !== undefined) {
        tmp.transitionTimingFunction = Caml_option.valFromOption(prim$280);
      }
      if (prim$281 !== undefined) {
        tmp.backfaceVisibility = Caml_option.valFromOption(prim$281);
      }
      if (prim$282 !== undefined) {
        tmp.perspective = Caml_option.valFromOption(prim$282);
      }
      if (prim$283 !== undefined) {
        tmp.perspectiveOrigin = Caml_option.valFromOption(prim$283);
      }
      if (prim$284 !== undefined) {
        tmp.transform = Caml_option.valFromOption(prim$284);
      }
      if (prim$285 !== undefined) {
        tmp.transformOrigin = Caml_option.valFromOption(prim$285);
      }
      if (prim$286 !== undefined) {
        tmp.transformStyle = Caml_option.valFromOption(prim$286);
      }
      if (prim$287 !== undefined) {
        tmp.justifyItems = Caml_option.valFromOption(prim$287);
      }
      if (prim$288 !== undefined) {
        tmp.justifySelf = Caml_option.valFromOption(prim$288);
      }
      if (prim$289 !== undefined) {
        tmp.placeContent = Caml_option.valFromOption(prim$289);
      }
      if (prim$290 !== undefined) {
        tmp.placeItems = Caml_option.valFromOption(prim$290);
      }
      if (prim$291 !== undefined) {
        tmp.placeSelf = Caml_option.valFromOption(prim$291);
      }
      if (prim$292 !== undefined) {
        tmp.appearance = Caml_option.valFromOption(prim$292);
      }
      if (prim$293 !== undefined) {
        tmp.caret = Caml_option.valFromOption(prim$293);
      }
      if (prim$294 !== undefined) {
        tmp.caretAnimation = Caml_option.valFromOption(prim$294);
      }
      if (prim$295 !== undefined) {
        tmp.caretShape = Caml_option.valFromOption(prim$295);
      }
      if (prim$296 !== undefined) {
        tmp.userSelect = Caml_option.valFromOption(prim$296);
      }
      if (prim$297 !== undefined) {
        tmp.maxLines = Caml_option.valFromOption(prim$297);
      }
      if (prim$298 !== undefined) {
        tmp.marqueeDirection = Caml_option.valFromOption(prim$298);
      }
      if (prim$299 !== undefined) {
        tmp.marqueeLoop = Caml_option.valFromOption(prim$299);
      }
      if (prim$300 !== undefined) {
        tmp.marqueeSpeed = Caml_option.valFromOption(prim$300);
      }
      if (prim$301 !== undefined) {
        tmp.marqueeStyle = Caml_option.valFromOption(prim$301);
      }
      if (prim$302 !== undefined) {
        tmp.overflowStyle = Caml_option.valFromOption(prim$302);
      }
      if (prim$303 !== undefined) {
        tmp.rotation = Caml_option.valFromOption(prim$303);
      }
      if (prim$304 !== undefined) {
        tmp.rotationPoint = Caml_option.valFromOption(prim$304);
      }
      if (prim$305 !== undefined) {
        tmp.alignmentBaseline = Caml_option.valFromOption(prim$305);
      }
      if (prim$306 !== undefined) {
        tmp.baselineShift = Caml_option.valFromOption(prim$306);
      }
      if (prim$307 !== undefined) {
        tmp.clip = Caml_option.valFromOption(prim$307);
      }
      if (prim$308 !== undefined) {
        tmp.clipPath = Caml_option.valFromOption(prim$308);
      }
      if (prim$309 !== undefined) {
        tmp.clipRule = Caml_option.valFromOption(prim$309);
      }
      if (prim$310 !== undefined) {
        tmp.colorInterpolation = Caml_option.valFromOption(prim$310);
      }
      if (prim$311 !== undefined) {
        tmp.colorInterpolationFilters = Caml_option.valFromOption(prim$311);
      }
      if (prim$312 !== undefined) {
        tmp.colorProfile = Caml_option.valFromOption(prim$312);
      }
      if (prim$313 !== undefined) {
        tmp.colorRendering = Caml_option.valFromOption(prim$313);
      }
      if (prim$314 !== undefined) {
        tmp.cursor = Caml_option.valFromOption(prim$314);
      }
      if (prim$315 !== undefined) {
        tmp.dominantBaseline = Caml_option.valFromOption(prim$315);
      }
      if (prim$316 !== undefined) {
        tmp.fill = Caml_option.valFromOption(prim$316);
      }
      if (prim$317 !== undefined) {
        tmp.fillOpacity = Caml_option.valFromOption(prim$317);
      }
      if (prim$318 !== undefined) {
        tmp.fillRule = Caml_option.valFromOption(prim$318);
      }
      if (prim$319 !== undefined) {
        tmp.filter = Caml_option.valFromOption(prim$319);
      }
      if (prim$320 !== undefined) {
        tmp.floodColor = Caml_option.valFromOption(prim$320);
      }
      if (prim$321 !== undefined) {
        tmp.floodOpacity = Caml_option.valFromOption(prim$321);
      }
      if (prim$322 !== undefined) {
        tmp.glyphOrientationHorizontal = Caml_option.valFromOption(prim$322);
      }
      if (prim$323 !== undefined) {
        tmp.glyphOrientationVertical = Caml_option.valFromOption(prim$323);
      }
      if (prim$324 !== undefined) {
        tmp.imageRendering = Caml_option.valFromOption(prim$324);
      }
      if (prim$325 !== undefined) {
        tmp.kerning = Caml_option.valFromOption(prim$325);
      }
      if (prim$326 !== undefined) {
        tmp.lightingColor = Caml_option.valFromOption(prim$326);
      }
      if (prim$327 !== undefined) {
        tmp.markerEnd = Caml_option.valFromOption(prim$327);
      }
      if (prim$328 !== undefined) {
        tmp.markerMid = Caml_option.valFromOption(prim$328);
      }
      if (prim$329 !== undefined) {
        tmp.markerStart = Caml_option.valFromOption(prim$329);
      }
      if (prim$330 !== undefined) {
        tmp.pointerEvents = Caml_option.valFromOption(prim$330);
      }
      if (prim$331 !== undefined) {
        tmp.shapeRendering = Caml_option.valFromOption(prim$331);
      }
      if (prim$332 !== undefined) {
        tmp.stopColor = Caml_option.valFromOption(prim$332);
      }
      if (prim$333 !== undefined) {
        tmp.stopOpacity = Caml_option.valFromOption(prim$333);
      }
      if (prim$334 !== undefined) {
        tmp.stroke = Caml_option.valFromOption(prim$334);
      }
      if (prim$335 !== undefined) {
        tmp.strokeDasharray = Caml_option.valFromOption(prim$335);
      }
      if (prim$336 !== undefined) {
        tmp.strokeDashoffset = Caml_option.valFromOption(prim$336);
      }
      if (prim$337 !== undefined) {
        tmp.strokeLinecap = Caml_option.valFromOption(prim$337);
      }
      if (prim$338 !== undefined) {
        tmp.strokeLinejoin = Caml_option.valFromOption(prim$338);
      }
      if (prim$339 !== undefined) {
        tmp.strokeMiterlimit = Caml_option.valFromOption(prim$339);
      }
      if (prim$340 !== undefined) {
        tmp.strokeOpacity = Caml_option.valFromOption(prim$340);
      }
      if (prim$341 !== undefined) {
        tmp.strokeWidth = Caml_option.valFromOption(prim$341);
      }
      if (prim$342 !== undefined) {
        tmp.textAnchor = Caml_option.valFromOption(prim$342);
      }
      if (prim$343 !== undefined) {
        tmp.textRendering = Caml_option.valFromOption(prim$343);
      }
      if (prim$344 !== undefined) {
        tmp.rubyAlign = Caml_option.valFromOption(prim$344);
      }
      if (prim$345 !== undefined) {
        tmp.rubyMerge = Caml_option.valFromOption(prim$345);
      }
      if (prim$346 !== undefined) {
        tmp.rubyPosition = Caml_option.valFromOption(prim$346);
      }
      return tmp;
    });
}

var inputStyle = {
  fontSize: "15px",
  height: "40px",
  outline: "none",
  padding: "7px",
  width: "300px"
};

exports.app = app;
exports.container = container;
exports.title = title;
exports.description = description;
exports.inputStyle = inputStyle;
/* No side effect */
