// Generated by BUCKLESCRIPT VERSION 4.0.17, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var IceCreamList$ReactTemplate = require("./IceCreamList.bs.js");

var ppx_printed_query = "query ($searchQuery: String)  {\nlistIceCreams(filter: {searchField: {contains: $searchQuery}})  {\nitems  {\nid  \nname  \ndescription  \nrating  \n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "listIceCreams");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var match$4 = Js_dict.get(Caml_option.valFromOption(match$3), "items");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$2 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$2);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeArray(value$2);
              tmp$2 = match$6 !== undefined ? match$6.map((function (value) {
                        var match = Js_json.decodeNull(value);
                        if (match !== undefined) {
                          return undefined;
                        } else {
                          var match$1 = Js_json.decodeObject(value);
                          var tmp;
                          if (match$1 !== undefined) {
                            var value$1 = Caml_option.valFromOption(match$1);
                            var match$2 = Js_dict.get(value$1, "id");
                            var field_id;
                            if (match$2 !== undefined) {
                              var value$2 = Caml_option.valFromOption(match$2);
                              var match$3 = Js_json.decodeString(value$2);
                              field_id = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                            } else {
                              field_id = Js_exn.raiseError("graphql_ppx: Field id on type IceCream is missing");
                            }
                            var match$4 = Js_dict.get(value$1, "name");
                            var field_name;
                            if (match$4 !== undefined) {
                              var value$3 = Caml_option.valFromOption(match$4);
                              var match$5 = Js_json.decodeString(value$3);
                              field_name = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                            } else {
                              field_name = Js_exn.raiseError("graphql_ppx: Field name on type IceCream is missing");
                            }
                            var match$6 = Js_dict.get(value$1, "description");
                            var field_description;
                            if (match$6 !== undefined) {
                              var value$4 = Caml_option.valFromOption(match$6);
                              var match$7 = Js_json.decodeString(value$4);
                              field_description = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                            } else {
                              field_description = Js_exn.raiseError("graphql_ppx: Field description on type IceCream is missing");
                            }
                            var match$8 = Js_dict.get(value$1, "rating");
                            var field_rating;
                            if (match$8 !== undefined) {
                              var value$5 = Caml_option.valFromOption(match$8);
                              var match$9 = Js_json.decodeNull(value$5);
                              if (match$9 !== undefined) {
                                field_rating = undefined;
                              } else {
                                var match$10 = Js_json.decodeNumber(value$5);
                                field_rating = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(value$5));
                              }
                            } else {
                              field_rating = undefined;
                            }
                            tmp = /* record */[
                              /* id */field_id,
                              /* name */field_name,
                              /* description */field_description,
                              /* rating */field_rating
                            ];
                          } else {
                            tmp = Js_exn.raiseError("graphql_ppx: Expected object of type IceCream, got " + JSON.stringify(value));
                          }
                          return tmp;
                        }
                      })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$2));
            }
          } else {
            tmp$2 = undefined;
          }
          tmp$1 = {
            items: tmp$2
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            listIceCreams: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(searchQuery, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "searchQuery",
                  searchQuery !== undefined ? searchQuery : null
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var searchQuery = variables.searchQuery;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "searchQuery",
                  searchQuery !== undefined ? searchQuery : null
                ]]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var Search = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var SearchQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

var component = ReasonReact.statelessComponent("SearchIceCreams");

function make$1(searchQuery, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var searchQuery$1 = make(searchQuery, /* () */0);
              return ReasonReact.element(undefined, undefined, Curry.app(SearchQuery[/* make */3], [
                              Caml_option.some(searchQuery$1.variables),
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    return React.createElement("div", undefined, "Searching");
                                  } else if (result.tag) {
                                    var match = result[0].listIceCreams;
                                    var items = match !== undefined ? Caml_option.valFromOption(match).items : undefined;
                                    if (items !== undefined) {
                                      var items$1 = Belt_Array.keepMap(items, (function (item) {
                                              return item;
                                            }));
                                      return ReasonReact.element(undefined, undefined, IceCreamList$ReactTemplate.make(items$1, /* array */[]));
                                    } else {
                                      return React.createElement("div", undefined, "Nothing to Show");
                                    }
                                  } else {
                                    return React.createElement("div", undefined, result[0].message);
                                  }
                                })
                            ]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.Search = Search;
exports.SearchQuery = SearchQuery;
exports.component = component;
exports.make = make$1;
/* SearchQuery Not a pure module */
